import React, { createContext, useContext, useState, useEffect, useRef } from 'react';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import NetInfo from '@react-native-community/netinfo';

import io from 'socket.io-client';

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
export const AppContext = createContext();

export const AppProvider = ({ children }) => {
  const appVersion = "0.0.1"
  const [socket, setSocket] = useState("")

  // const CONNECTURL = "https://yaprikolist.ru/api"
  const CONNECTURL = Platform.OS === 'ios' ? 'http://localhost:9000/api' : 'http://10.0.2.2:9000/api';
  // const CONNECTURL = 'https://4979-2604-6600-1c6-2000-8331-32a5-fd3f-f347.ngrok-free.app'

  const [user, setUser] = useState(null);
  const [sessionId, setSessionId] = useState(null);

  const [userChats, setUserChats] = useState([ // –ü–æ–ª—É—á–∞–µ–º —ç—Ç–æ—Ç –º–∞—Å—Å–∏–≤ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ MainChatScreen, –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
    { id: "1", name: "–ê–ª–∏—Å–∞", lastMessage: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?" },
    { id: "2", name: "–ë–æ—Ä–∏—Å", lastMessage: "–ó–∞–≤—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è?" },
    { id: "3", name: "–°–≤–µ—Ç–∞", lastMessage: "–û—Ç–ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–±–µ —Ñ–æ—Ç–æ üì∏" },
    { id: "4", name: "–ï–≤–≥–µ–Ω–∏–π", lastMessage: "–ü–æ—à–ª–∏ –≤ –±–∞—Ä?" },
    { id: "5", name: "–ñ–µ–∫–∞", lastMessage: "–ü–æ–µ–¥–µ—à—å –≤ –°–æ—á–∏?" },
    { id: "6", name: "–î–∏–∞–Ω–∞", lastMessage: "–ß—Ç–æ —Ç—ã –¥–µ–ª–∞–ª –≤—á–µ—Ä–∞?" },
  ]);
  console.log("Auth")


  const createSocket = () => {
    const newSocket = Platform.OS === 'ios' ? io('http://localhost:9003') : io('http://10.0.2.2:9003')
    setSocket(newSocket)

    return newSocket;
  };


  // –í—ã–≤–æ–¥ AsyncStorage –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  async function getAllDataFromAsyncStorage() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
      const keys = await AsyncStorage.getAllKeys();

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
      const result = await AsyncStorage.multiGet(keys);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const allData = result.reduce((acc, [key, value]) => {
        acc[key] = value;
        return acc;
      }, {});

      console.log("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ AsyncStorage:", allData);
      return allData;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ AsyncStorage:", error);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const saveData = async (key, value) => {
    try {
      await AsyncStorage.setItem(key, JSON.stringify(value))
    } catch (e) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
      console.error("Failed to save data", e)
    }
  }

  useEffect(() => {
    if (user !== null) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `user` –Ω–µ `null`
      saveData("user", user);
    }
    if (sessionId !== null) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `sessionId` –Ω–µ `null`
      saveData("sessionId", sessionId);
    }
  }, [user])



  const loadData = async (key) => {
    try {
      const value = await AsyncStorage.getItem(key);
      if (value !== null) {
        return JSON.parse(value);
      }
    } catch (e) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
      console.error("Failed to load data", e);
    }
    return null;
  };


  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–º—è —é–∑–µ—Ä–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞—Ç—å –≤ –∞–∫–∫–∞—É–Ω—Ç –µ—Å–ª–∏ –∏–º—è –≤ —Å—Ç–æ—Ä—ç–¥–∂–µ)
  useEffect(() => {
    const loadUserData = async () => {
      const savedUser = await loadData('user');
      if (savedUser) {
        setUser(savedUser);
      }
      const savedSession = await loadData('sessionId');
      if (savedSession) {
        setSessionId(savedSession);
      }
    };

    loadUserData();
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ (–≤—ã–Ω–µ—Å–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç)
  const checkInternetConnection = async () => {
    const state = await NetInfo.fetch();
    if (state.isConnected) {
      console.log("+ –ò–Ω–µ—Ç")
      return true
    } else {
      console.log("–ò–Ω–µ—Ç–∞ –Ω–µ—Ç")
      return false // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω–µ—Ç false, –≤–µ—Ä—Å–∏—è –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è
    }
  };

  return (
    <AppContext.Provider value={{ getAllDataFromAsyncStorage, appVersion, user, setUser, sessionId, setSessionId, checkInternetConnection, socket, createSocket, userChats, setUserChats, CONNECTURL }}>
      {children}
    </AppContext.Provider>
  );
};

export function useAppContext() {
  return useContext(AppContext)
}